#!/usr/bin/perl -w

# Thu Nov 26 22:53:32 EST 2009
(my $email='christian-novo%jaeger,mine,nu')=~ tr/%,/@./;

use strict;

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname listfile

  Apply the patches in the listfile to the current git dir; assumes
  the patches are in the same dir as listfile.

  Like with rebase -i, prefixing patches with 's' is possible. The
  ordering is as in the file.

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

use Getopt::Long;
our $verbose=0;
GetOptions("verbose"=> \$verbose,
	   "help"=> sub{usage},
	   ) or exit 1;
usage unless @ARGV==1;

our ($listfile)=@ARGV;

{
    package Patch;
    use Class::Array -fields=> -publica=>
      (
       'path',
       'is_leader', # giving the message.
      );
    #as alwaysstillmissingthenewgell.
    sub new {
	my $cl=shift;
	bless [@_],$cl
    }
    #so wie bei  schm  missing das manual jus override von accessoren  ?..  wl  ~.
    end Class::Array;
}


{
    package Cluster;
    use Class::Array -fields=> -publica=>
      (
       'message', # string
       #'lead', # path
       #'squashes', # @ of additional patches.
       #ehr. no need for distinction right.
       'patches', # paths
      );
    sub new {
	my $cl=shift;
	my $s=$cl->SUPER::new;
	$$s[Patches]=[]; #to avoid "Can't use an undefined value as an ARRAY reference" in is_empty, wow old horridity
	$s
    }
    sub set_message_from_path {
	my $s=shift;
	@_==1 or die;
	my ($path)=@_;
	die "message already set" if $$s[Message];
	use Chj::xopen 'xopen_read';
	my $f=xopen_read $path;
	$$s[Message]= $f->xcontent;
	$f->xclose;
    }
    sub add_patch {
	my $s=shift;
	push @{$$s[Patches]},@_
    }
    sub is_empty {
	my $s=shift;
	not @{$$s[Patches]}
    }
    end Class::Array;
}

#use Chj::xperlfunc;
use Chj::xopen 'xopen_read';

our $listfh= xopen_read $listfile;

our @clusters;
our $curcluster= new Cluster;
while (<$listfh>) {
    chomp;
    next if /^\s*#/;
    if (/^(\*?)(\d+-.+)/) {
	my ($is_leader,$path)=($1,$2);
	# a squash. extend existing cluster.
	$curcluster->add_patch(Patch->new($path,$is_leader));
    } elsif (/^\s*$/) {
	# a new cluster.
	push @clusters, $curcluster unless $curcluster->is_empty;
	$curcluster= new Cluster;
    } elsif (/^(\d+)$/) {
	my $path=$1;
	# a message file
	$curcluster->set_message_from_path ($path);
    } else {
	die "no match for '$_'";
    }
}
push @clusters, $curcluster unless $curcluster->is_empty;
$listfh->xclose;



#use Chj::ruse;
use Chj::Backtrace; use Chj::repl; repl;
