#!/usr/bin/perl -w

# Thu Nov 26 22:53:32 EST 2009
(my $email='christian-novo%jaeger,mine,nu')=~ tr/%,/@./;

use strict;

$0=~ /(.*?)([^\/]+)\z/s or die "?";
my ($mydir, $myname)=($1,$2);
sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname listfile

  Apply the patches in the listfile to the current git dir; assumes
  the patches are in the same dir as listfile.

  Like with rebase -i, prefixing patches with 's' is possible. The
  ordering is as in the file.

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

use Getopt::Long;
our $verbose=0;
our $opt_dry;
GetOptions("verbose"=> \$verbose,
	   "help"=> sub{usage},
	   "dry-run"=> \$opt_dry,
	   ) or exit 1;
usage unless @ARGV==1;

our ($listfile)=@ARGV;

{
    package _Error;
    sub new {
	my $cl=shift;
	@_==1 or die "expect 1 arg";
	my ($msg)=@_;
	bless \$msg, $cl
    }
    sub string {
	my $s=shift;
	$$s
    }
}
{
    package _NoCommitmsgError;
    our @ISA=("_Error");
}
{
    package _MissingCommitidError;
    our @ISA=("_Error");
}

{
    package Patch;
    use Class::Array -fields=> -publica=>
      (
       'basedir',
       'filename',
       'is_leader', # giving the message.
       'commitid', # set-once.
      );
    #as alwaysstillmissingthenewgell.
    sub new {
	my $cl=shift;
	bless [@_],$cl
    }
    sub path {
	my $s=shift;
	"$$s[Basedir]/$$s[Filename]"
    }
    #so wie bei  schm  missing das manual jus override von accessoren  ?..  wl  ~.
    sub set_commitid {
	my $s=shift;
	my ($commitid)=@_;
	die "commitid already set" if $$s[Commitid];
	$$s[Commitid]=$commitid
    }
    use Chj::FP::lazy;
    sub message {
	my $s=shift;
	# hm. von patch file hm. extrahieren doch doof?  hm. eben formulieren dings, anweisung, wie das von git dann -c so nimmt gell  hm  muss id kennen hmmmm.
	# AH  aus file die commitid extrahieren ichdep gell?wollteich. jaklar geht eh nid per neuer commidid weil die eben message nid hat--ehr zwar dochschon.und actually jene von file. hm back, doch wie geplant.
	Delay {
	    if ($$s[Commitid]) {
		[ "-C",$$s[Commitid] ] # to be added to git commit for the cluster
	    } else {
		my $msg= "missing commitid for patchfile $$s[Filename]";
		if ($opt_dry) {
		    _MissingCommitidError->new($msg)
		} else {
		    # would fail too but  only after giving the stringified representation to git ya know
		    die $msg
		}
	    }
	}
    }
    sub author_date {
	my $s=shift;
	#---
	use Chj::xopen ();
	my $f= Chj::xopen::xopen_read $s->path;
	my $headers={};
	while (<$f>) {
	    chomp;
	    last if /^$/;
	    next if /^From /;
	    if (my ($key,$val)= /^([\w-]+):\s*(.*)/) {
		push @{$$headers{lc $key}},$val;
	    } else {
		die "invalid header in file: '$_' ".$s->path;
	    }
	}
	$f->xclose;
	#---
	@{$$headers{date}||[]}==1 or die "doesn't contain exactly one 'date' header: ".$s->path;
	$$headers{date}[0]
    }
    use Chj::Git::Functions;
    sub apply {
	my $s=shift;
	Chj::Git::Functions::xgit_do "am", "-3", $s->path;
	# ^ does not output the new commitid in a clear way, thus:
	my $commitid= Chj::Git::Functions::xgit_rev_parse "HEAD";
	$s->set_commitid ($commitid);
    }
    end Class::Array;
}


{
    package Cluster;
    use Class::Array -fields=> -publica=>
      (
       'line', #of the start, in source file.
       'message', # string
       #'lead', # path
       #'squashes', # @ of additional patches.
       #ehr. no need for distinction right.
       'patches', # paths
      );
    sub new {
	my $cl=shift;
	my ($line)=@_;
	my $s=$cl->SUPER::new;
	$$s[Line]=$line;
	$$s[Patches]=[]; #to avoid "Can't use an undefined value as an ARRAY reference" in is_empty, wow old horridity
	$s
    }
    sub set_message_from_path {
	my $s=shift;
	@_==1 or die;
	my ($path)=@_;
	die "message already set" if $$s[Message];
	use Chj::xopen 'xopen_read';
	my $f=xopen_read $path;
	$$s[Message]= $f->xcontent;
	$f->xclose;
    }
    sub add_patch {
	my $s=shift;
	push @{$$s[Patches]},@_
    }
    sub is_empty {
	my $s=shift;
	not @{$$s[Patches]}
    }
    sub is_singlepatch {
	my $s=shift;
	@{$$s[Patches]}==1
    }
    use Date::Parse ();
    sub author_date {
	my $s=shift;
	die "empty" if $s->is_empty;
	# select the *latest* author_date of all patches.
	my @p= map {
	    [
	     ((scalar Date::Parse::str2time($_))||die "invalid time?: '$_'"),
	     $_
	    ]
	} map {
	    $_->author_date
	} @{$s->patches};
	# now sort it? or  anyway  jus us sort dumbi
	(sort {
	    $$a[0] cmp $$b[0]
	} @p)[-1][1]
    }
    use Chj::FP::lazy;
    sub maybe_message_promise {
	my $s=shift;
	@{$$s[Patches]} >= 1 or die "message message invalid if no patches exist in cluster";
	my @leader= grep { $_->is_leader } @{$s->patches};
	if (@leader==0) {
	    if ($$s[Message]) {
		Delay { ["-m", $$s[Message] ] } #just for consistency. so that I can Force it. Since there's no Force-if-promise or so.
	    } else {
		if ($s->is_singlepatch) {
		    undef # $$s[Patches][0]->message
		} else {
		    new _NoCommitmsgError "Cluster starting at line $$s[Line]: neither patch leader nor explicit message given";
		}
	    }
	} elsif (@leader==1) {
	    die "message set both from patch leader and explicitely" if $$s[Message];
	    $leader[0]->message
	} else {
	    die "more than one leader patch (for message selection) selected";
	}
    }
    end Class::Array;
}

use Chj::xperlfunc 'dirname';
our $basedir= dirname $listfile;

use Chj::xopen 'xopen_read';

our $listfh= xopen_read $listfile;

our @clusters;
my $line=1;
our $curcluster= new Cluster ($line);
while (<$listfh>) {
    chomp;
    $line++;
    next if /^\s*#/;
    if (/^(\*?)(\d+-.+)/) {
	my ($is_leader,$path)=($1,$2);
	# a squash. extend existing cluster.
	$curcluster->add_patch(Patch->new($basedir,$path,$is_leader));
    } elsif (/^\s*$/) {
	# a new cluster.
	push @clusters, $curcluster unless $curcluster->is_empty;
	$curcluster= new Cluster ($line);
    } elsif (/^(\d+)$/) {
	my $path=$1;
	# a message file
	warn "actually untested";
	$curcluster->set_message_from_path ($path);
    } elsif (/^\[\s*$/) {
	my @c;
	while (<$listfh>) {
	    chomp;
	    $line++;#!
	    if (/^\]\s*(?:#.*)?$/) {
		last;
	    }
	    if (/^#/) {
		die "comments inside comment declarations not allowed: '$_'";
	    }
	    push @c, $_
	}
	$curcluster->set_message(join ("\n", map { my $s=$_; $s=~ s/\s+\z//; $s } @c));
    } else {
	die "no match for '$_'";
    }
}
push @clusters, $curcluster unless $curcluster->is_empty;
$listfh->xclose;

sub check {
    my $errs=0;
    for my $c (@clusters) {
	#ugly copy stuf. from apply.
	for my $p (@{$c->patches}) {
	    #$p->apply($basedir);
	    #now we calculate paths anyway ourselves?? ~td:
	    my $path= $basedir."/".$p->filename;
	    -e $path or do {
		warn "patch file '$path' missing\n";
		$errs++;
	    };
	}
# 	my $m= $c->maybe_message_promise;
# 	#if (my @e= grep { UNIVERSAL::isa($_,"_Error") } @m) {
# 	print $_->string,"\n"
# 	  for (grep { if (UNIVERSAL::isa($_,"_MissingCommitidError")) { 0 } else { $errs++; 1 } }
# 	       grep { UNIVERSAL::isa($_,"_Error") } ($m ? Force $m : ()));
#^can't fix. I mean,   somehowrong ach hell TODO.  darf nicht forcen. will ja  auch nur Error wissen. wann aber der ? kann nid wissen ob es nur  commitid fehlt   derzeit. still too intertwined   also das Delay um intertwining zu retten ist also ne doofe idee rite.
#BAD. weil reason for check really genau das hier war.
    }
    $errs
}

use Chj::Git::Functions;
use Chj::FP::lazy;

sub apply {
    for my $c (@clusters) {
	my $applypatches=sub {
	    for my $p (@{$c->patches}) {
		$p->apply;
	    }
	};
	my $msgoptions= $c->maybe_message_promise;
	if (not $msgoptions) {
	    $c->is_singlepatch or die "???can only happen with singlepatches right?";
	    &$applypatches
	} else {
	    my $oldhead= Chj::Git::Functions::xgit_rev_parse "HEAD";
	    &$applypatches;
	    Chj::Git::Functions::xgit_do "reset", "--soft", $oldhead;
	    local $ENV{GIT_AUTHOR_DATE}= $c->author_date;
	    Chj::Git::Functions::xgit_do "commit", @{Force $msgoptions};
	}
    }
}


my $errors= check;
#my or our"?".
#f

if ($errors) {
    print "$errors errors in input file, stopping.\n";
    exit 1;
} else {
    if ($opt_dry) {
	print "no errors in input file; not running because in dry-run mode.\n";
    } else {
	apply
    }
}
#use Chj::ruse;
use Chj::Backtrace;
#use Chj::repl; repl;
